*ficus.txt* Taking notes with plaintext and Vim.

==============================================================================
CONTENTS                                                       *ficus-contents*

  Introduction.............................................|ficus-introduction|
    Folder structure...................................|ficus-folder-structure|
    Notes format............................................|ficus-note-format|
    Requirements...........................................|ficus-requirements|
  Usage...........................................................|ficus-usage|
    Quick start.............................................|ficus-quick-start|
    Commands...................................................|ficus-commands|
    Mappings...................................................|ficus-mappings|
    Options.....................................................|ficus-options|
  Extension...................................................|ficus-extension|
  INTEGRATION...............................................|ficus-integration|
    fzf.................................................|ficus-integration-fzf|

==============================================================================
INTRODUCTION                                               *ficus-introduction*

Ficus.vim is a note-taking app standing on the shoulder of vim.

------------------------------------------------------------------------------
FOLDER STRUCTRUE                                       *ficus-folder-structure*

Ficus.vim is flat-file based, which only requires a folder to store your
notes. Folder structure is more like this:
>
    /path/to/your/library
    ├── assets/
    ├── note-1.md
    ├── note-2.md
    └── ...
>
Ficus.vim searchs for notes under this folder (not recursively). The
attachments can be stored in `assets/` or anywhere your like. But Keep them
close to your notes is more convenient for referencing.

You can custom the library path by |g:ficus_dir| option.

Advantages:
    1. links to attachments/notes works in any situation. You can jump to the
       note under the cursor with |gf| in vim. Other tools can find the
       attachments without problem.
    2. Putting all notes within the same folder can shorten the link length.
       They can be easily autocompleted with |i_CTRL-X_CTRL-F| in vim.

------------------------------------------------------------------------------
NOTES FORMAT                                                *ficus-note-format*

Every notes has metadata and content. The metadata provides information about
the note. The following metadata keys (case-sensitive) are required:

  title~
    Title of note.

  created~
    Created date of note.

  modified~
    Last modification date of note.

  category~
    Category of note. For instance, `cate-A/cate-B` means note belongs to
    category `cate-B` which is a subcategory of category `cate-A`. Note can only
    belong to one category, but categories can be nested infinitely.

  tags~
    A list of tags of note. Note can own multiple tags.

  author~
    Author of note.

  description~
    Description of note.

Custom keys are allowed, they are just ignored by ficus.vim.

Currently, ficus.vim supports Markdown. Metadata and content are stored in
same file. Metadata is stored in YAML Front Matter:
>
    /path/to/your/library/note-1.md:
    ---
    title: This is the title
    created: 2019-08-15T22:22:22+0800
    modified: 2019-08-15T22:22:59+0800
    category: categoryA/subcategory/...
    tags: [tag1, tag2, ...]
    author: Name
    description: This is the description
    ---

    Note content goes here ...
<
  Note: YAML Front Matter must be at the exact beginning of the file.

Section |ficus-extension| describes how to support other languages.

------------------------------------------------------------------------------
REQUIREMENTS                                               *ficus-requirements*

- vim 8
- Python3
  - ruamel.yaml

Currently, ficus.vim supports Markdown as note-taking language. python package
`ruamel.yaml` is required for read&write notes' metadata (YAML Front Matter).

==============================================================================
USAGE                                                             *ficus-usage*

------------------------------------------------------------------------------
QUICK START                                                 *ficus-quick-start*

  STEP 1~
    Configure ficus.vim in your `.vimrc`. The default library path is
    `~/Documents/ficus`, you can override it with |g:ficus_dir| option. Read
    section |ficus-options| for more options.

  STEP 2~
    Type `:Ficus` and then press return in vim normal mode to open the ficus
    window. Window can be closed by command `:Ficus!`.

    For convenience, you can put this line in your `.vimrc` to easily toggle
    ficus window: >
      nnoremap <Leader>[ :FicusToggle<CR>
<
    While, the default <Leader> key is usually `\`.

  STEP 3~
    There are 3 views in ficus window:
      - CategoryView: Show the category tree
      - TagView: Show the tags list
      - NoteView: Show the notes list of the category/tag

    All the views has similar keybindings. For example:
      - Switch between views: `u`
      - Open the category/tag/note: `o`
      - Create new note: `C`
      - Rename the category/tag/note: `R`

    Different views have some unique keybindings. For example:
      - Collapse/expand category in CategoryView: `h/l`
      - Sort notes by title/created/modified in NoteView: `st/sc/sm`
      - Sort tags by name/count in TagView: `st/sc`

    see details in section |ficus-mappings|.

------------------------------------------------------------------------------
COMMANDS                                                       *ficus-commands*

:Ficus[!]                                                               *Ficus*

  Open ficus window. Close the opened ficus window if executed with a !.

:FicusToggle                                                      *FicusToggle*

  Toggle ficus window.

:FicusReload                                                      *FicusReload*

  Reload ficus. Data will be updated from all note files.

------------------------------------------------------------------------------
MAPPINGS                                                       *ficus-mappings*

CategoryView~

  --------------------------------------------------------~
  Key     Description~
  --------------------------------------------------------~
  h       Collapse the category under the cursor.
  l       Expand the category under the cursor.
  o       Open the category under the cursor.
  u       Go to TagView.
  R       Rename the category under the cursor.
  C       Create a new note under this category.
  --------------------------------------------------------~

TagView~

  --------------------------------------------------------~
  Key     Description~
  --------------------------------------------------------~
  o       Open the tag under the cursor.
  u       Go to CategoryView.
  R       Rename the tag under the cursor.
  C       Create a new note under this tag.
  st      Sort tags by title.
  sc      Sort tags by notes count.
  sr      Reverse the sorting order.
  ss      Traverse the sorting keys.
  sS      Traverse the sorting keys conversely.
  --------------------------------------------------------~

NoteView~

  --------------------------------------------------------~
  Key     Description~
  --------------------------------------------------------~
  o       Open the note in previous window.
  O       Open the note in split.
  v       Open the note in vsplit.
  t       Open the note in new tab.
  u       Go to CategoryView/TagView.
  R       Rename the file of the note under the cursor.
  C       Create a new note.
  D       Delete the file of the note under the cursor.
  st      Sort notes by title.
  sm      Sort notes by modified date.
  sc      Sort notes by created date.
  sr      Reverse the sorting order.
  ss      Traverse the sorting keys.
  sS      Traverse the sorting keys conversely.
  --------------------------------------------------------~

------------------------------------------------------------------------------
OPTIONS                                                         *ficus-options*

*g:ficus_dir*
  The parent directory of your notes. Ficus.vim only searchs for note files in
  this directory (not recursively).

  Default: `'~/Documents/ficus'`

*g:ficus_note_extension*
  A |string| sets the default filename extension of note files.

  Default: `md`

*g:ficus_date_format*
  The format-string used to format date and time. It follows the rules of
  |strftime()|.

  Default: `'%Y-%m-%dT%H:%M:%S%z'`

  Examples: >
    let g:ficus_date_format = '%Y-%m-%d %H:%M'  " ==>  2019-08-16 22:44
<
*g:ficus_category_open_max_level*
  A |number| sets the default maximum level of category opening. All categories
  are collapsed by default if set to `0`. The top-level categories are opened
  while the others are collapsed by default if set to `1`, and so on.

  Default: `2`

*g:ficus_category_recent_offset_days*
  A |number| sets the offest days of `Recent` category. The notes modified
  within this number of days are included in the `Recent` category.

  Default: `7`

*g:ficus_winwidth*
  A |number| sets the window width of Ficus.

  Default: `35`

*g:ficus_expand_icon*
  A 3-items |List| sets the icon of category handle. The 1st item is for
  opened category; The 2nd item is for the collapsed category; The 3th item
  is for the empty category (both opened and collapsed).

  Default: `['▶ ', '▼ ', '  ']`

*g:ficus_icons*
  A |Dict| sets the icons of different types of categories.

  Default: `{'category': '', 'inbox': '', 'recent': '', 'all': '', 'tag': ''}`

  Examples: >
    {
        'category': ' ',
        'inbox':    ' ',
        'recent':   ' ',
        'all':      ' ',
        'tag':      ' ',
    }
<
  Note: The above example requires font support.
        Nerd Fonts (https://www.nerdfonts.com/) might be a good choice.

*g:ficus_note_sort_order*
  A 2-items |List| sets the default sort order of notes list. The 1st item
  sets the sorting `key`; The 2nd item sets the sorting `order`.

  `key` is a string. Allowed values:
    - `'title'`: Sort by the title of notes
    - `'created'`: Sort by the created date of notes
    - `'modified'`: Sort by the modified date of notes
  `order` is a boolean number:
    - `0` for ascending
    - `1` for descending

  Default: `['modified', 1]`

*g:ficus_tag_sort_order*
  A 2-items |List| sets the default sort order of tags. The 1st item sets the
  sorting `key`; The 2nd item sets the sorting `order`.

  `key` is a string. Allowed values:
    - `'title'`: Sort by the title of tags
    - `'count'`: Sort by the notes count of tags
  `order` is a boolean number:
    - `0` for ascending
    - `1` for descending

  Default: `['count', 1]`

*g:ficus_border_char*
  A character used to construct the seperator of notes list.

  Default: `'-'`

*g:ficus_newnote_header*
  A |string| sets the default template of new note creation. The template
  supports variable passing. If `var` is a valid metadata key of note and
  currently defined, `{{var}}` will be replaced with the value of the key.

  Default: >
      "---\n" .
    \ "title: {{title}}\n" .
    \ "created: {{created}}\n" .
    \ "modified: {{modified}}\n" .
    \ "category: {{category}}\n" .
    \ "tags: {{tags}}\n" .
    \ "author: {{author}}\n" .
    \ "description: {{description}}\n" .
    \ "---\n"

*g:ficus_delete_command*
  A |string| sets the shell command for note file deletion.

  Default: `rm -rf`

  Examples: >
    let g:ficus_delete_command = 'trash-put'  " Use trash-cli to delete file
<

  Note: The default value is DANGEROUS.

*g:ficus_auto_update_lastmod*
  A |boolean| number determines if auto update the metadata key `modified` when
  |write| the note to file. `1` for turn on; `0` for turn off.

  Note: Currently auto update lastmod feature only supports Markdown with YAML
  Front Matter format.

  Default: `0`

*g:FicusCustomReader*
  A |string| sets the name of default reader function. It's used to read
  metadata from note files.

  Args:
    `path`: |string| -> The absolute path of the note.

  Return:
    : |Dict| -> The metadata of the note.

  Default: `ficus#reader#MarkdownReader`

*g:FicusCustomWriter*
  A |string| sets the name of default writer function. It's used to write
  metadata to note files. Required metadata keys and the note path is
  contained in.

  Args:
    `note`: |Dict| -> The object represents the note.

  Return: None

  Default: `ficus#writer#MarkdownWriter`

==============================================================================
EXTENSION                                                     *ficus-extension*

Support other languages is possible. The key step is to tell ficus.vim how to
obtain/put metadata from/to note file.

Take support for reStructuredText (http://docutils.sourceforge.net/rst.html)
as an example.

  STEP 1~
    Find a way to store the metadata. reStructuredText has a directive `meta`
    (http://docutils.sourceforge.net/docs/ref/rst/directives.html#meta) which
    can be used to store metadata.

    For example: >
      .. meta::
         :description: The reStructuredText plaintext markup language
         :keywords: plaintext, markup language
<
  STEP 2~
    Implement the reader function, override the |g:FicusCustomReader| option
    with the name of it. This function should take one argument, which is the
    absolute path of the target note file. Then extract values of required
    metadata keys. Finally return them as a |Dict|.

  STEP 3~
    Implement the writer function, override the |g:FicusCustomWriter| option
    with the name of it. This function should take one argument, ficus.vim
    will pass the note object to it, metadata and note path is contained in.
    Then update the note file's metadata part with object's metadata.

    Note: Pay attention to keep the custom keys and the order of keys.

  STEP 4~
    Override the |g:ficus_note_extension| option. `rst` for reStructuredText.

    Override the |g:ficus_newnote_header| option.

==============================================================================
INTEGRATION                                                 *ficus-integration*

------------------------------------------------------------------------------
FZF                                                     *ficus-integration-fzf*

Requirement: https://github.com/junegunn/fzf

*ficus#fzf#categories(...)*
  This function launches fzf to select a category. It accepts one optional
  |Boolean| argument `bang`, if true, it starts fzf in fullscreen mode.

*ficus#fzf#notes(...)*
  This function launches fzf to select notes. It accepts one optional
  |Boolean| argument `bang`, if true, it starts fzf in fullscreen mode.
  Markdown-style link (`[title](path)`) will be inserted into the current
  buffer. If multiple notes is selected, a markdown-style list of links will
  be inserted.

  Additional actions:
    - <C-t>: Only insert the title
    - <C-p>: Only insert the path

*ficus#fzf#tags(...)*
  This function launches fzf to select tags. It accepts one optional |Boolean|
  argument `bang`, if true, it starts fzf in fullscreen mode.  The comma-space
  separated tags will be inserted into the current buffer.

Tips: For better experience, map the functions to custom keys.
  For example: >
    augroup ficus
        autocmd!
        autocmd FileType ficusnote.* inoremap @c <C-r>=ficus#fzf#categories()<CR>
        autocmd FileType ficusnote.* inoremap @n <C-r>=ficus#fzf#notes()<CR>
        autocmd FileType ficusnote.* inoremap @t <C-r>=ficus#fzf#tags()<CR>
    augroup END
<

vim:tw=78:ts=8:ft=help:norl:
